#!/bin/sh

# configure_networking_custom(){
# 	interfaces=$(ip -o link | grep 'link/ether' | cut -d' ' -f2 | tr -d ':')
# 	for i in $interfaces; do
# 		# -1 Try to get a lease once. On failure exit with code 2.
# 		dhclient -v $i
# 	done
# }

get_url()
{
	_proto="$1"
	_url="$2"
	_dst="$3"
	_filename=`basename "${dst}"`

	case "${_proto}" in
	tftp)
		atftp --verbose --option "blksize 40960" -l "${_dst}" -r "${_url}" --no-source-port-checking -g "${ROOTSERVER}" 69
		return $?
	;;
	http)
		if echo ${_url} | grep -q '^http' ; then
			true
		else
			_url="http://${ROOTSERVER}/${_url}"
		fi
		wget -O "${_dst}" "${_url}"
		return $?
	;;
	esac
}

do_rammount()
{
	log_begin_msg "Downloading rootfs image ${rootproto} ${rooturl}"
	get_url "${rootproto}" "${rooturl}" "/tmp/rootfs.squashfs" || return $?
	log_end_msg

	set -x

	if [ -z "$overlays" ]; then

		echo "Mounting rootfs"
		mount -t squashfs -o loop '/tmp/rootfs.squashfs' "${rootmnt}" || return $?

	else

		echo "Mounting rootfs image to temp directory"
		mkdir -p /tmp/AUFS/rootfs
		mount -t squashfs -o loop '/tmp/rootfs.squashfs' /tmp/AUFS/rootfs || return $?

		# All lowerdirs for overlayfs
		lowerdirs=/tmp/AUFS/rootfs
		# All mountpoints that shoould be later moved inside real root
		mountpoints=rootfs

		echo "Processing overlays"
		for i in $overlays; do

			echo "Preparing"
			# XXXXXX is replaced with random digits and letters
			dir=$( mktemp -d -p /tmp/AUFS/ ovl_XXXXXX )
			dirname=${dir#/tmp/AUFS/}
			file=$( mktemp -p /tmp )

			echo "Downloading overlay $i"
			get_url "$overlayproto" "$i" $file || return $?

			echo "Extracting overlay $i to tmpfs"
			mount -t tmpfs none $dir
			gunzip -c $file | tar -x -C $dir -f- || return $?
			rm $file

			lowerdirs="${dir}:${lowerdirs}"
			mountpoints="$mountpoints ${dirname}"

		done

		echo "Mounting real root with overlayfs"
		mount -t overlay -o ro,lowerdir="$lowerdirs" none "${rootmnt}" || return $?

		echo "Creating tmpfs for moved mountpoints"
		mount -t tmpfs none "${rootmnt}"/AUFS || return $?

		echo "Moving mountpoints to directory in real root"
		for i in $mountpoints; do
			mkdir "${rootmnt}"/AUFS/"$i"
			mount --move /tmp/AUFS/"$i" "${rootmnt}"/AUFS/"$i" || return $?
		done

	fi

	# This parts in rootfs should be writable
	# /var/tmp - temporary files to be preserved between reboots(by FHS). Used by systemd-timesyncd
	# /var/lib/systemd - systemd timers and other auxiliary files
	# /var/lib/dhcp - reuqired to hold dhclient leases
	# /etc/apparmor.d/cache - required for apparmor cache. Apparmor doesn't play well with overlayfs root, this is in case I will ever fix it
	for dir in /tmp /var/tmp /run /media /var/log /var/lib/systemd /var/lib/dhcp /etc/apparmor.d/cache; do
		if [ -d "${rootmnt}${dir}" ]; then
			echo "Creating tmpfs rw filesystem for $dir"
			mount -t tmpfs none "${rootmnt}${dir}"
		fi
	done

	set +x

	# Home needs some magic 'cause it can be mounted through NFS
	# if [ "${homeproto}" = "nfs" ]; then
	# 	echo 'MOUNTING HOME WITH NFS'
	# 	echo "homeurl=${homeurl} ROOTPATH=${ROOTPATH} BOOTIF=${BOOTIF}"
	# 	#echo "Press Enter to continue"
	# 	#read enter
	# 	set -x
	# 	[ -z "${homeurl}" ] && [ "${ROOTPATH}" ] && homeurl=`dirname "${ROOTPATH}"`"/home/${BOOTIF}"
	# 	[ -z "${homeurl}" ] && homeurl=`dirname "${filename}"`"/home/${BOOTIF}"
	# 	[ -z `echo "${homeurl}" | grep ':'` ] && homeurl="${ROOTSERVER}:${homeurl}"
	# 	log_begin_msg "Mounting NFS home ${homeurl}"
	# 	nfsmount -o "nolock,rw,retrans=10" "${homeurl}" "${rootmnt}/vagrant" || return $?
	# 	#echo "Press Enter to continue"
	# 	#read enter
	# 	set +x
	# 	log_end_msg
	# else
	echo "Downloading home image ${homeproto} ${homeurl}"
	get_url "${homeproto}" "${homeurl}" "/tmp/home.tar.gz" || return $?

	echo "Mounting tmpfs to ${rootmnt}/home/vagrant"
	mount -t tmpfs -o size=${homesize:-512M} none ${rootmnt}/home || return $?

	mkdir -p ${rootmnt}/home/vagrant

	echo "Extracting home"
	gunzip -c '/tmp/home.tar.gz' | tar -x -C ${rootmnt}/home/vagrant -f- || return $?
	rm -f '/tmp/home.tar.gz'

	echo "do_rammount: OK"
	sleep 1
	return 0
}

mountroot()
{
		export homeproto='tftp'
		export rootproto='tftp'
		export rooturl=''
		export homeurl=''
		for x in $(cat /proc/cmdline); do
				case $x in
				rooturl=*)
						export rooturl=${x#rooturl=}
						;;
				homeurl=*)
						export homeurl=${x#homeurl=}
						;;
				homeproto=*)
						export homeproto=${x#homeproto=}
						;;
				overlays=*)
						overlays=${x#overlays=}
						export overlays=$( echo $overlays | tr ';' ' ' )
						;;
				uvesafb=*)
						uvesafb=${x#uvesafb=}
						export uvesafb=$( echo $uvesafb | tr ';' ' ' )
						;;
				overlayproto=*)
						export overlayproto=${x#overlayproto=}
						;;
				rootproto=*)
						export rootproto=${x#rootproto=}
						;;
				initrddebug=*)
						export initrddebug=${x#initrddebug=}
						;;
				esac
		done

		# Start debug shell inside initrd if initrddebug is set
		if [ -n "$initrddebug" ]; then
			echo "DEBUG shell inside initrd"
			sh
		fi

		echo "Loading module squashfs"
		modprobe squashfs
		# For DHCP
		echo "Loading module af_packet"
		modprobe af_packet

		# Fallback mode for graphics
		if [ -n "$uvesafb" ]; then
			echo "Configuring graphics with usavefb: $uvesafb"
			modprobe uvesafb $uvesafb
		fi

		# Networking
		# Default delay is around 180s
		delay=${ROOTDELAY:-180}

		# built-in from /scripts/functions
		configure_networking
		# configure_networking_custom

		do_rammount
		if [ $? -ne 0 ]; then
			# enable reboot on panic
			echo 1 > /proc/sys/kernel/panic
			# enable sysrq
			echo 1 > /proc/sys/kernel/sysrq
			echo "Something went wrong, rebooting in 15 seconds"
			sleep 15
			# trigger kernel panic
			echo c > /proc/sysrq-trigger
		fi
}
